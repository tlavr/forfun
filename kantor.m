function [x,y] = kantor(N,x,y)
% Функция возвращает значения х и у для построения канторовой лестницы в
% зависимости от числа разбиений N

    dx = (x(end) - x(1))./3; % считаем приращение для х ( разница на концах интервала, деленная на 3)
    a = [x(1) x(1)+dx]; % первый интервал для оси х
    b = [x(1)+dx x(1)+2*dx]; % второй интервал
    c = [x(1)+2*dx x(end)]; % третий интервал
    fa = [y(1) mean([y(1) y(end)])]; %значения функции на первом интервале (от начала интервала до среднего значения)
    fc = [mean([y(1) y(end)]) y(end)]; %значения на втором интервале(среднее арифм от концов интервала)
    fb = mean([y(1) y(end)]).*ones(1,length(b)); % значения на третьем интервале ( от среднего до конца интервала)
    if (N == 1) %если одна итерация, то выходим из функции и возвращаем посчитанные значения х и у
        x = [a b(2:end-1) c];
        y = [y(1) mean([y(1) y(end)]).*ones(1,length(b)) y(end)];
    else %иначе рекурсивно вызываем эту функцию для интервалов a и с
        [x1,y1] = kantor(N-1,a,fa); %то же самое для а, только уменьшаем N на единицу
        [x2,y2] = kantor(N-1,c,fc); %то же самое для с
        x = [x1 b x2]; %добавляем полученные интервалы в х
        y = [y1 fb y2]; % и в у
    end
end